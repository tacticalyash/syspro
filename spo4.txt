 
import java.util.LinkedList;
 
 public class Threadexample{
    public static void main(String[] args)
    throws InterruptedException
    {
        final PC pc = new PC();
 
        Thread t1 = new Thread(new Runnable(){
            @Override
            public void run()
            {
                try{
                    pc.produce();
                
                }
                catch(InterruptedException e){
                    e.printStackTrace();
                }
            }
 
        });
        Thread t2 = new Thread(new Runnable(){
             @Override
            public void run()
            {
                try{
                    pc.consume();
                
                }
                catch(InterruptedException e){
                    e.printStackTrace();
                }
            }
        });
        t1.start();
        t2.start();
 
        t1.join();
        t2.join();
    }
 
    public static class PC{
        LinkedList <Integer> list = new LinkedList< >();
        int capacity = 2;
 
        public void produce()throws InterruptedException
        {
            int value =0;
            while (true){
                synchronized(this){
                    while(list.size() == capacity)
                    wait();
 
                    System.out.println("Producer Produced-" + value);
                    list.add(value ++);
                    notify();
 
                    Thread.sleep(1000);
                }
            }
        }
 
        public void consume() throws InterruptedException
        {
            while(true){
                synchronized(this)
                {
                    while(list.size()==0)
                    wait();
 
                    int val = list.removeFirst();
 
                    System.out.println("consumer consumed-"+ val);
 
                    notify();
                    Thread.sleep(10);
                }
 
            }
        }
 
    }
 }
 
 
//chopstick 

1)Chopstick Problem
mport java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadLocalRandom;
 
public class Main {
    static int philosopher = 5;
    static philosopher philosophers[] = new philosopher[philosopher];
    static chopstick chopsticks[] = new chopstick[philosopher];
 
    static class chopstick {
        public Semaphore mutex = new Semaphore(1);
 
        void grab() {
            try {
                mutex.acquire();
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }
        }
 
        void release() {
            mutex.release();
        }
 
        boolean isFree() {
            return mutex.availablePermits() > 0;
        }
    }
 
    static class philosopher extends Thread {
        public int number;
        public chopstick leftchopstick;
        public chopstick rightchopstick;
 
        philosopher(int num, chopstick left, chopstick right) {
            number = num;
            leftchopstick = left;
            rightchopstick = right;
        }
 
        public void run() {
 
            while (true) {
                leftchopstick.grab();
                System.out.println("philosopher" + (number + 1) + "grabs left chopstick.");
                rightchopstick.grab();
                System.out.println("philosopher" + (number + 1) + "grabs right chopstick.");
                eat();
                leftchopstick.release();
                System.out.println("philosopher" + (number + 1) + "releases left chopstick.");
                rightchopstick.release();
                System.out.println("philosopher" + (number + 1) + "releases right chopstick.");
            }
        }
 
        void eat() {
            try {
                int sleepTime = ThreadLocalRandom.current().nextInt(0, 1000);
                System.out.println("philosopher" + (number + 1) + "eats for" + sleepTime);
 
                Thread.sleep(sleepTime);
 
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }
        }
 
    }
 
    public static void main(String argv[]) {
        for (int i = 0; i < philosopher; i++) {
            chopsticks[i] = new chopstick();
        }
        for (int i = 0; i < philosopher; i++) {
            philosophers[i] = new philosopher(i, chopsticks[i], chopsticks[(i + 1) % philosopher]);
            philosophers[i].start();
        }
 
        while (true) {
            try {
                Thread.sleep(1000);
                boolean deadlock = true;
                for (chopstick f : chopsticks) {
                    if (f.isFree()) {
                        deadlock = false;
                        break;
                    }
                }
                if (deadlock) {
                    Thread.sleep(1000);
                    System.out.println("Everyone Eats");
                    break;
                }
            }
 
            catch (Exception e) {
                e.printStackTrace(System.out);
            }
        }
 
        {
 
            System.out.println("Exit The Program!");
            System.exit(0);
        }
 
    }
}

